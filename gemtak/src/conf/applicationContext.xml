<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:cache="http://www.springframework.org/schema/cache"  xmlns:task="http://www.springframework.org/schema/task" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
	    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
	 	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd 
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
	 	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd 
	 	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd 
	 	http://www.springframework.org/schema/cache
		http://www.springframework.org/schema/cache/spring-cache.xsd">
	 	
	<!-- Context -->
	<util:properties id="appProperties" location="classpath:application.properties"></util:properties>
	
	<context:property-placeholder location="classpath*:application.properties" ignore-resource-not-found="true" />
	
	<context:annotation-config />
	<context:component-scan base-package="com.bavlo.counter,com.bavlo.gemtak" />
	<tx:annotation-driven proxy-target-class="true" />
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" rollback-for="exception.TxException"/>
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.bavlo.counter.dao.HibernateDAO.*(..))"/>
	</aop:config>
	 
 	<!-- Shiro配置********************开始 -->
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
    <!--<bean id="myRealm" class="com.bavlo.counter.security.MyRealm"/>-->  
   
    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 --><!--  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"/>  
    </bean>  
   
    -->
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
    <!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
         Shiro的核心安全接口,这个属性是必须的   
        <property name="securityManager" ref="securityManager"/>
          
        <property name="loginUrl" value="/login.jsp"/>  
	    <property name="unauthorizedUrl" value="/unauthorized.jsp"/>  
	    <property name="filters">  
	        <util:map>  
	            <entry key="authc" value-ref="formAuthenticationFilter"/>  
	        </util:map>  
	    </property>  
	    <property name="filterChainDefinitions">  
	        <value>  
	            /index.jsp = anon  
	            /unauthorized.jsp = anon  
	            /login.jsp = authc  
	            /logout = logout  
	            /** = user  
	        </value>  
	    </property>  
    
    </bean>-->  
   
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>-->  
   
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <!-- 配置以下两个bean即可实现此功能 -->  
    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->  
    <!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->  
    <!--   
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"/>  
    </bean>  
     -->  
	<!-- Shiro配置****************结束 -->
	
	<!-- 缓存配置*****开始 -->
	<!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->
	<cache:annotation-driven cache-manager="cacheManager" />
	<!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->
	<!-- 
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
	  <property name="caches">
	    <set>
	      <bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/>
	    </set>
	  </property>
	</bean>
	 -->
	<!-- 若只想使用Spring自身提供的缓存器,则注释掉下面的两个关于Ehcache配置的bean,并启用上面的SimpleCacheManager即可 -->
	<!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
	<bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	  <property name="configLocation" value="classpath:ehcache.xml"/>
	</bean>
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
	  <property name="cacheManager" ref="cacheManagerFactory"/>
	</bean>
	<!-- 缓存配置*****结束 -->
	
	<!-- 测试或开发环境--> 
	<beans profile="test">
		 <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		  <property name="driverClassName">
		   <value>com.mysql.jdbc.Driver</value>
		  </property>
		  <property name="url">
		   <value>jdbc:mysql://192.168.1.116:3306/gemtak?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=utf-8</value>
		  </property>
		  <property name="username">
		   <value>root</value>
		  </property>
		  <property name="password">
		   <value>root</value>
		  </property>
		 </bean>
	</beans>	
</beans>